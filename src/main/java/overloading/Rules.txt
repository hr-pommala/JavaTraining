Points About Method Overloading:--
--------------------------------
1>Method Signature: Overloading is determined by the method signature (method name + parameter list).
2>Return Type: The return type does not play a role in method overloading.
3>Parameter Order: You can overload methods by changing the order of parameters.
4>Varargs: You can use varargs to pass a variable number of arguments to a method.


Points about Auto-Widening:--
---------------------------

Primitive Types: Java supports widening conversions between primitive types. For example:

int can be widened to long, float, or double.
char can be widened to int, long, float, or double.
byte can be widened to short, int, long, float, or double.
Auto-Widening in Method Overloading:

If you pass a type that can be automatically converted (widened) to another type expected by the method, Java will do it automatically.
For instance, if a method accepts a double and you pass an int, Java will automatically widen the int to double.
Method Resolution:

The JVM will pick the method with the closest match to the argument types.
If a more specific type (e.g., int) is available, it will be chosen over a more general type (e.g., double), but widening can help if no exact match is found.
Method Overloading Conflicts:

If there are multiple overloaded methods that could apply (for instance, int and float), and auto-widening could apply to both, the Java compiler might throw a compile-time error due to ambiguity.


Key Concepts:--
-------------
Autoboxing: Java automatically converts between primitive types and their corresponding wrapper classes. For example:
-----------
int → Integer
double → Double
char → Character
boolean → Boolean
Method Overloading with Autoboxing:

When a method is overloaded with both primitive types and their wrapper class equivalents, Java will choose the correct method based on the argument type.
If you pass a primitive type to a method expecting a wrapper class, Java will automatically box the primitive into the appropriate wrapper class.
Similarly, when you pass a wrapper class object, Java will unbox it to the corresponding primitive type if needed.
Method Resolution:

If both a primitive type and its wrapper class are available in the overloaded methods, the compiler will choose the most appropriate method based on the argument type.
If there is an ambiguity (i.e., both the primitive and wrapper class are compatible for a particular value), the compiler will prefer the method with the wrapper class because autoboxing can happen.

Key Points:
Primitive vs. Wrapper Classes:--
------------------------------
Java will prefer a direct match with a primitive type (e.g., int over Integer).
However, autoboxing allows a method expecting an Integer to accept an int, and vice versa, when applicable.
Method Resolution with Autoboxing:

If the argument can be automatically boxed or unboxed (as with primitive-to-wrapper or wrapper-to-primitive), Java resolves the method accordingly.
In the case of ambiguous scenarios, the compiler can get confused about which method to pick, and this can lead to a compile-time error.
Autoboxing Only for Specific Wrapper Classes:

Autoboxing is limited to primitive types and their wrapper classes. It won't work for user-defined types or classes.
For example, a method expecting String and Object won’t auto-convert between these types.


Points to Remember on Varargs:--
-----------------------------
Varargs must be the last parameter in the method signature.
Varargs can only be used once in the method signature. You cannot have multiple varargs parameters in a single method.
When overloading methods with varargs, it’s important to avoid ambiguity, as varargs can match a range of arguments. This can lead to issues when the method signature is not specific enough.